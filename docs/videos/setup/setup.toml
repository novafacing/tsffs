# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

secrets = ["USERNAME", "PASSWORD", "GH_TOKEN"]
secrets_file = "secrets.toml"
wpm = 130
keep_open = true

[kitty]
font_size = 28.0
allow_remote_control = "yes"

[[command]]
command = """
docker build -q -t demo-training-setup-tsffs --build-context "applications.security.fuzzing.confuse=../../../" --build-arg "USERNAME=$USERNAME" --build-arg "PASSWORD=$PASSWORD" --build-arg "GH_TOKEN=$GH_TOKEN" .
docker run --rm --name demo-training-setup-tsffs -it demo-training-setup-tsffs bash
apt-get -y update
clear
"""
prompt = true
immediate = true

[[command]]
script_pre = """
Welcome back to our series on TSFFS: Target software fuzzer for SIMICS.

In this video, I'll be walking through how to set up and build TSFFS on Linux, along
with its dependencies -- the Rust toolchain and the SIMICS full system simulator.

I'm running in a completely fresh Ubuntu 22.04 system. The only prior prep I've done is
I've exported a few environment variables:

USERNAME: my normal system username
PASSWORD: my intel password
GH_TOKEN: my Github personal access token. When we get to the step where we clone this
          repository, you can run `gh auth login` to log in. I'll mention this later as
          well.
HTTP_PROXY and HTTPS_PROXY: If you need to use a proxy server, you'll need to export
these variables as well.

The first thing I'll do is install my dependencies:

krb5-user, for Kerberos authentication to download SIMICS packages

smbclient: To actually download the SIMICS packages we'll need

curl: to download the installer script for Rust as well as the SIMICS package manager

git: to clone this repository

build-essential: to provide the linker we need to build the fuzzer

gpg: which is a dependency of the github command line tool
"""
prompt = true
command = "apt-get -y install krb5-user smbclient curl git build-essential gpg\nY\n"

[[command]]
script_pre = """
This install will take a couple minutes to download and install all our packages. Once
apt gets to the install script component of the process, you'll be prompted for your
default Kerberos realm. You can find this region code on your employee profile if you
are outside of north america. For me, it is "AMR.CORP.INTEL.COM".
"""
prompt = true
command = "AMR.CORP.INTEL.COM\n"


[[command]]
script_pre = """
Now, we'll install the gh command line tool. We need to install the tool from GitHub
directly, as the version packaged for Ubuntu is outdated.

First, we'll download the github cli GPG key
"""
prompt = true
command = """
curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
"""

[[command]]
script_pre = """
Then we'll add a line to our apt sources so apt can find the gh package
"""
prompt = true
command = """
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list >/dev/null
"""

[[command]]
script_pre = """
Before we can install gh, we need to update apt so it can collect the new source we
added.
"""
prompt = true
command = """
apt-get -y update
"""

[[command]]
script_pre = """
Finally, we'll go ahead and install gh, the github cli tool. Note that if you do not
have a GH_TOKEN environment variable exported, you'll also want to run 'gh auth login'
after this step.
"""
prompt = true
command = """
apt-get -y install gh
"""

[[command]]
script_pre = """
Now that we have the gh tool, we'll clone this repository into our home directory.
"""
prompt = true
command = """
gh repo clone intel-innersource/applications.security.fuzzing.confuse $HOME/applications.security.fuzzing.confuse/
"""

[[command]]
script_pre = """
Now that we have gh installed and our repository cloned,, we'll install the rust
toolchain. You can find the up to date command to install it at rustup.rs.

The rust toolchain installs the rust compiler rustc, along with cargo, the rust package
manager and build system, and the standard library. It also installs by default a few
tools we don't need but may be helpful to you if you contribute to TSFFS including
rust-analyzer, rust format, and a few others.
"""
prompt = true
command = "curl https://sh.rustup.rs -sSf | bash -s -- -y\n"

[[command]]
script_pre = """
We'll go ahead and follow the installer's directions to reload the PATH environment
variable.
"""
prompt = true
command = "source $HOME/.cargo/env\n"

[[command]]
script_pre = """
Next, we need to authenticate with Kerberos with kinit. Authenticating with Kerberos is
necessary to download internal SIMICS packages. To avoid displaying my password and
username, I'm using environment variables. You should type your username and password
instead.
"""
prompt = true
command = "echo $PASSWORD | kinit $USERNAME\n"

[[command]]
script_pre = """
To double check that we successfully authenticated, we can use klist and ensure we have
a ticket displayed in the output.
"""
prompt = true
command = "klist\n"

[[command]]
script_pre = """
To install SIMICS packages, we first need to download and install the SIMICS package
manager ISPM. We'll create a SIMICS install directory to download both ISPM
and our packages to in our home directory.
"""
prompt = true
command = "mkdir -p $HOME/simics/ispm/\n"

[[command]]
script_pre = """
Next, we'll download the SIMICS package manager. You can obtain an up-to-date URL to
download ISPM from 
"""
prompt = true
command = """
curl -o "$HOME/simics/ispm/ispm-internal-latest-linux64.tar.gz" 'https://af02p-or.devtools.intel.com/artifactory/simics-repos/pub/simics-installer/intel-internal/ispm-internal-latest-linux64.tar.gz'
"""

[[command]]
script_pre = """
Now that we've downloaded ISPM, we need to extract it.
"""
prompt = true
command = """
tar -C $HOME/simics/ispm/ --strip-components=1 -xvf $HOME/simics/ispm/ispm-internal-latest-linux64.tar.gz
"""

[[command]]
script_pre = """
And finally, we can go ahead and install our packages. For this and the following
tutorials, we only need two packages: the SIMICS base package, number 1000, and the X86
Quick start platform, number 2096. We'll install into our SIMICS directory we've been
using, and we'll use the internal package repo for public packages.

The versions used here, 6.0.168 for simics base and 6.0.69 for x86-qsp, are the most
recent as of the making of this video, but you may want to update them to newer versions
as they become available.
"""
prompt = true
command = """
$HOME/simics/ispm/ispm install --non-interactive --install-dir $HOME/simics/ --package-repo https://af02p-or.devtools.intel.com/ui/native/simics-local/pub/simics-6/linux64/ 1000-6.0.168 2096-6.0.69
"""

[[command]]
script_pre = """
With our SIMICS packages installed, we'll tell the fuzzer build system where to find
them by writing the SIMICS_HOME variable to the file '.env' in the repository root.
"""
prompt = true
command = """
echo SIMICS_HOME=$HOME/simics/ > $HOME/applications.security.fuzzing.confuse/.env
"""

[[command]]
script_pre = """
And finally, we will build the fuzzer. We use 'cargo build' to build the fuzzer binary
and we pass in the version of SIMICS base we downloaded, in this case 6.0.168, as a
feature flag. Notice I pass in the manifest path of the repository, but you can also
cd into the repository and run without this flag. Also notice I am using the full
path to the cargo binary.
"""
command = """
cargo build --manifest-path $HOME/applications.security.fuzzing.confuse/Cargo.toml --features=6.0.168
"""
prompt = true
