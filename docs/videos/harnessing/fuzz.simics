# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

$disk0_image = (lookup-file "%simics%/minimal_boot_disk.craff")
run-command-file "%simics%/targets/qsp-x86/qsp-hdd-boot.simics" 

script-branch "UEFI Shell Enter Branch" {
    local $kbd = $system.mb.sb.kbd
    local $con = $system.console.con
    local $sercon = $system.serconsole.con

    bp.time.wait-for seconds = 10

    $kbd.key-press ESC
    bp.time.wait-for seconds = 3

    foreach $i in (range 2) {
        $kbd.key-press KP_DOWN
        bp.time.wait-for seconds = .5
    }

    $kbd.key-press ENTER
    bp.time.wait-for seconds = .5

    $kbd.key-press KP_UP
    bp.time.wait-for seconds = .5

    $kbd.key-press ENTER
    bp.time.wait-for seconds = .5

    $kbd.key-press ENTER         
    bp.time.wait-for seconds = .5

    $con.input "FS0:\n"
    bp.time.wait-for seconds = 10

    # We are now in the UEFI shell, we'll download our EFI app
    local $manager = (start-agent-manager)
    $con.input ("SimicsAgent.efi --download " + (lookup-file "%simics%/target.efi") + "\n")
    bp.time.wait-for seconds = .5

    stop


    @conf.tsffs_module.iface.tsffs_module.init()
    @conf.tsffs_module.iface.tsffs_module.add_processor(SIM_get_object(simenv.system).mb.cpu0.core[0][0])
    # Page fault
    @conf.tsffs_module.iface.tsffs_module.add_fault(14)
    # Invalid opcode
    @conf.tsffs_module.iface.tsffs_module.add_fault(6)
    # Treat breakpoints as faults
    @conf.tsffs_module.iface.tsffs_module.set_breakpoints_are_faults(True)

    $con.input "target.efi\n"
    continue

}

script-branch "Set breakpoints" {
    local $TARGET_HARNESS_ADDRESS = 0x180001082
    local $TARGET_INSTRUCTION_ADDRESS = 0x180001267
    local $TARGET_DATA_ADDRESS = 0x180003000

    local $MAGIC_START = 1
    bp.magic.wait-for $MAGIC_START

    # Create a context for the CPU to set virtual address breakpoints. If you only need
    # physical address breakpoints, you can just use `break`
    local $ctx = (new-context)
    board.mb.cpu0.core[0][0].set-context $ctx

    # Get the value of the IP and the offset from the known address (in this case, it
    # should be 0)
    local $rip = (board.mb.cpu0.core[0][0].read-reg rip)
    local $offset = $rip - $TARGET_HARNESS_ADDRESS

    # Set a breakpoint on the bad instruction
    local $harness_break_addr = ($TARGET_INSTRUCTION_ADDRESS + $offset)
    echo "Setting instruction harness on:"
    print -x $harness_break_addr
    $ctx.break -x $harness_break_addr

    # Set a breakpoint on the data memory range
    local $data_break_addr = ($TARGET_DATA_ADDRESS + $offset)
    echo "Setting data harness on:"
    print -x $data_break_addr
    $ctx.break -r -w $data_break_addr
}

run